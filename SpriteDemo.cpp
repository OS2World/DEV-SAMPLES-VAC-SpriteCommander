/*******************************************************************************
* FILE NAME: SpriteDemo.cpp                                                    *
*                                                                              *
* DESCRIPTION:                                                                 *
*   Class implementation of the class:                                         *
*     SpriteDemo                                                               *
* ---------------------------------------------------------------------------- *
* Warning: This file was generated by the VisualAge C++ Visual Builder.        *
* Modifications to this source file will be lost when the part is regenerated. *
*******************************************************************************/
#ifndef _IFRAME_
#include <iframe.hpp>
#endif

#ifndef _IMENUBAR_
#include <imenubar.hpp>
#endif

#ifndef _IMCELCV_
#include <imcelcv.hpp>
#endif

#ifndef _SPRITEDETAILS_
#include "SpriteDetails.hpp"
#endif

#ifndef _IPOINT_
#include <ipoint.hpp>
#endif

#ifndef _IFONT_
#include <ifont.hpp>
#endif

#ifndef _FASTCANVAS_
#include "FastCanvas.hpp"
#endif

#ifndef _IINFOA_
#include <iinfoa.hpp>
#endif

#ifndef _IVBFILED_
#include <ivbfiled.hpp>
#endif

#ifndef _SPRITE_
#include "Sprite.hpp"
#endif

#ifndef _SPRITECOMMANDER_
#include "SpriteCommander.hpp"
#endif

#ifndef _SPRITEDROPHANDLER_
#include "SpriteDropHandler.hpp"
#endif

#ifndef _ISTRING_
#include <istring.hpp>
#endif

#ifndef _INTERFACEENABLER_
#include "InterfaceEnabler.hpp"
#endif

#ifndef _IVBFLY_
#include <ivbfly.hpp>
#endif

#ifndef _IMSGBOX_
#include <imsgbox.hpp>
#endif

#ifndef _INOTIFEV_
#include <inotifev.hpp>
#endif

#ifndef _IOBSERVR_
#include <iobservr.hpp>
#endif

#ifndef _ISTDNTFY_
#include <istdntfy.hpp>
#endif

#ifndef _SPRITEDEMO_
#include "SpriteDemo.hpp"
#endif

#ifndef _IVBDEFS_
#include <ivbdefs.h>
#endif

#ifndef _ITRACE_
#include <itrace.hpp>
#endif


//*****************************************************************************
// Class definition for SpriteDemoConn6
//*****************************************************************************
class SpriteDemoConn6 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn6(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn6(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IFrameWindow * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_exitMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : exitMenuItem(commandEvent) to FrameWindow(close))");
         try {target->close();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IFrameWindow * target;
   unsigned long id;


};   //SpriteDemoConn6


//*****************************************************************************
// Class definition for SpriteDemoConn60
//*****************************************************************************
class SpriteDemoConn60 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn60(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn60(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_openMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : openMenuItem(commandEvent) to OpenSprite(fileName))");
         try {target->setFileName("*.gfi");}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //SpriteDemoConn60


//*****************************************************************************
// Class definition for SpriteDemoConn16
//*****************************************************************************
class SpriteDemoConn16 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn16(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn16(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, IVBFileDialog * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_openMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : openMenuItem(commandEvent) to OpenSprite(showModally))");
         try {target->showModally();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   IVBFileDialog * target;
   unsigned long id;


};   //SpriteDemoConn16


//*****************************************************************************
// Class definition for SpriteDemoConn62
//*****************************************************************************
class SpriteDemoConn62 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn62(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemo * aSource, SpriteDemo * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to (sizeAndPositionAppWindow))");
         try {target->sizeAndPositionAppWindow();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemo * source;
   SpriteDemo * target;


};   //SpriteDemoConn62


//*****************************************************************************
// Class definition for SpriteDemoConn71
//*****************************************************************************
class SpriteDemoConn71 : public IObserver {
public:
   virtual  ~SpriteDemoConn71(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< Sprite* > * aSource, SpriteDetails * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteCollection(this) to SpriteDetails(items))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setItems(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SpriteDetails::itemsId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< Sprite* > * source;
   SpriteDetails * target;
   Boolean aligning;


};   //SpriteDemoConn71


//*****************************************************************************
// Class definition for SpriteDemoConn77
//*****************************************************************************
class SpriteDemoConn77 : public IObserver {
public:
   virtual  ~SpriteDemoConn77(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, IVBVariableClass<IString> * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenSprite(fileName) to newFilename(this))");
         ITRACE_DEVELOP(" setting source from target ");
         aligning = true;
         try {source->setFileName(target->target());}
         catch (IException& exc) {};
         aligning = false;
         }
      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenSprite(fileName) to newFilename(this))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTarget(source->fileName());}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == IVBFileDialog::pressedOkId) && (source == &anEvent.notifier()))
         setTarget();  /* set target to source value */
      else
      if ((anEvent.notificationId() == IVBVariableClass<IString>::targetId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   IVBVariableClass<IString> * target;
   Boolean aligning;


};   //SpriteDemoConn77


//*****************************************************************************
// Class definition for SpriteDemoConn17
//*****************************************************************************
class SpriteDemoConn17 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn17(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVBFileDialog * aSource, SpriteDemoSpriteFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IVBFileDialog::pressedOkId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : OpenSprite(pressedOkEvent) to SpriteFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVBFileDialog * source;
   SpriteDemoSpriteFactoryFactory * target;


};   //SpriteDemoConn17


//*****************************************************************************
// Class definition for SpriteDemoConn20
//*****************************************************************************
class SpriteDemoConn20 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn20(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemoSpriteFactoryFactory * aSource, IVSequence< Sprite* > * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemoSpriteFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteFactory(newEvent) to SpriteCollection(addAsFirst))");
         try {target->addAsFirst((Sprite *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemoSpriteFactoryFactory * source;
   IVSequence< Sprite* > * target;


};   //SpriteDemoConn20


//*****************************************************************************
// Class definition for SpriteDemoConn33
//*****************************************************************************
class SpriteDemoConn33 : public IObserver {
public:
   virtual  ~SpriteDemoConn33(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< Sprite* > * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteCollection(this) to FastCanvas1(spriteSequence))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setSpriteSequence(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == FastCanvas::spriteSequenceId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< Sprite* > * source;
   FastCanvas * target;
   Boolean aligning;


};   //SpriteDemoConn33


//*****************************************************************************
// Class definition for SpriteDemoConn25
//*****************************************************************************
class SpriteDemoConn25 : public IObserver {
public:
   virtual  ~SpriteDemoConn25(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< Sprite* > * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteCollection(this) to SpriteCommander(spriteSequence))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setSpriteSequence(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SpriteCommander::spriteSequenceId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< Sprite* > * source;
   SpriteCommander * target;
   Boolean aligning;


};   //SpriteDemoConn25


//*****************************************************************************
// Class definition for SpriteDemoConn26
//*****************************************************************************
class SpriteDemoConn26 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn26(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn26(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_nextFrameMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : nextFrameMenuItem(commandEvent) to SpriteCommander(advanceFrame))");
         try {target->advanceFrame(1);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn26


//*****************************************************************************
// Class definition for SpriteDemoConn37
//*****************************************************************************
class SpriteDemoConn37 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn37(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn37(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_previousFrameMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : previousFrameMenuItem(commandEvent) to SpriteCommander(advanceFrame))");
         try {target->advanceFrame(-1);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn37


//*****************************************************************************
// Class definition for SpriteDemoConn38
//*****************************************************************************
class SpriteDemoConn38 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn38(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn38(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_MenuItem3)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem3(commandEvent) to SpriteCommander(move))");
         try {target->move(IPoint(-1,0));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn38


//*****************************************************************************
// Class definition for SpriteDemoConn49
//*****************************************************************************
class SpriteDemoConn49 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn49(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn49(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_moveRight)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : moveRight(commandEvent) to SpriteCommander(move))");
         try {target->move(IPoint(1,0));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn49


//*****************************************************************************
// Class definition for SpriteDemoConn30
//*****************************************************************************
class SpriteDemoConn30 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn30(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn30(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_downMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : downMenuItem(commandEvent) to SpriteCommander(move))");
         try {target->move(IPoint(0,1));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn30


//*****************************************************************************
// Class definition for SpriteDemoConn41
//*****************************************************************************
class SpriteDemoConn41 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn41(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn41(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_upMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : upMenuItem(commandEvent) to SpriteCommander(move))");
         try {target->move(IPoint(0,-1));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn41


//*****************************************************************************
// Class definition for SpriteDemoConn29
//*****************************************************************************
class SpriteDemoConn29 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn29(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDetails * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   SpriteDemoConn29 & setASelectedSpriteNumber(SpriteDetails * aSelf) {iASelectedSpriteNumber = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDetails::selectId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteDetails(selectEvent) to SpriteCommander(selectedSpriteNumber))");
         try {target->setSelectedSpriteNumber(iASelectedSpriteNumber->selectedCollectionPosition());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDetails * source;
   SpriteCommander * target;
   SpriteDetails * iASelectedSpriteNumber;


};   //SpriteDemoConn29


//*****************************************************************************
// Class definition for SpriteDemoConn50
//*****************************************************************************
class SpriteDemoConn50 : public IObserver {
public:
   virtual  ~SpriteDemoConn50(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(FastCanvas * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastCanvas1(this) to SpriteCommander(fastCanvas))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setFastCanvas(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SpriteCommander::fastCanvasId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   FastCanvas * source;
   SpriteCommander * target;
   Boolean aligning;


};   //SpriteDemoConn50


//*****************************************************************************
// Class definition for SpriteDemoConn61
//*****************************************************************************
class SpriteDemoConn61 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn61(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemoSpriteFactoryFactory * aSource, SpriteDetails * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemoSpriteFactoryFactory::newObjectCreatedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteFactory(newEvent) to SpriteDetails(select))");
         try {target->select(1, true);}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemoSpriteFactoryFactory * source;
   SpriteDetails * target;


};   //SpriteDemoConn61


//*****************************************************************************
// Class definition for SpriteDemoConn48
//*****************************************************************************
class SpriteDemoConn48 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn48(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn48(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_MenuItem1)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem1(commandEvent) to SpriteCommander(moveFast))");
         try {target->moveFast(IPoint(1,0));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn48


//*****************************************************************************
// Class definition for SpriteDemoConn59
//*****************************************************************************
class SpriteDemoConn59 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn59(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn59(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_MenuItem11)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : MenuItem11(commandEvent) to SpriteCommander(moveFast))");
         try {target->moveFast(IPoint(-1,0));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn59


//*****************************************************************************
// Class definition for SpriteDemoConn70
//*****************************************************************************
class SpriteDemoConn70 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn70(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn70(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_FastUpMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastUpMenuItem(commandEvent) to SpriteCommander(moveFast))");
         try {target->moveFast(IPoint(0,-1));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn70


//*****************************************************************************
// Class definition for SpriteDemoConn91
//*****************************************************************************
class SpriteDemoConn91 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn91(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn91(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IMenuBar * aSource, SpriteCommander * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IFrameWindow::commandId)
      if (((IEvent *) anEvent.eventData().asUnsignedLong())->parameter1().number1() == id+WNDOFFSET_SpriteDemo_FastDownMenuItem)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : FastDownMenuItem(commandEvent) to SpriteCommander(moveFast))");
         try {target->moveFast(IPoint(0,1));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IMenuBar * source;
   SpriteCommander * target;
   unsigned long id;


};   //SpriteDemoConn91


//*****************************************************************************
// Class definition for SpriteDemoConn74
//*****************************************************************************
class SpriteDemoConn74 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn74(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemo * aSource, SpriteDemo * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to (fastMovementMultiplier))");
         try {target->setFastMovementMultiplier(IPoint(20,20));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemo * source;
   SpriteDemo * target;


};   //SpriteDemoConn74


//*****************************************************************************
// Class definition for SpriteDemoConn45
//*****************************************************************************
class SpriteDemoConn45 : public IObserver {
public:
   virtual  ~SpriteDemoConn45(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDetails * aSource, SpriteDropHandler * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteDetails(this) to SpriteDropHandler(targetWindow))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setTargetWindow(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SpriteDropHandler::targetWindowId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDetails * source;
   SpriteDropHandler * target;
   Boolean aligning;


};   //SpriteDemoConn45


//*****************************************************************************
// Class definition for SpriteDemoConn55
//*****************************************************************************
class SpriteDemoConn55 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn55(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemo * aSource, SpriteDropHandler * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to SpriteDropHandler(initializeDirectManipulation))");
         try {target->initializeDirectManipulation();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemo * source;
   SpriteDropHandler * target;


};   //SpriteDemoConn55


//*****************************************************************************
// Class definition for SpriteDemoConn67
//*****************************************************************************
class SpriteDemoConn67 : public IObserver {
public:
   virtual  ~SpriteDemoConn67(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDropHandler * aSource, SpriteDetails * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteDropHandler(this) to SpriteDetails(spriteDropHandler))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setSpriteDropHandler(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      if ((anEvent.notificationId() == SpriteDetails::spriteDropHandlerId) && (target == &anEvent.notifier()))
         setSource();  /* set source to target value */
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDropHandler * source;
   SpriteDetails * target;
   Boolean aligning;


};   //SpriteDemoConn67


//*****************************************************************************
// Class definition for SpriteDemoConn78
//*****************************************************************************
class SpriteDemoConn78 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn78(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemo * aSource, FastCanvas * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

   //---------------------------------------------------------------------------
   // public member data
   //---------------------------------------------------------------------------
   static const INotificationId exceptionId;

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemo::readyId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : (ready) to FastCanvas1(prepare))");
         try {target->prepare();}
         catch (IException& exc) {notifyObservers(INotificationEvent(exceptionId, *this, true, IEventData((void *)&exc)));};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemo * source;
   FastCanvas * target;


};   //SpriteDemoConn78

const INotificationId SpriteDemoConn78::exceptionId = "SpriteDemoConn78::exceptionId";

//*****************************************************************************
// Class definition for SpriteDemoConn87
//*****************************************************************************
class SpriteDemoConn87 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn87(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDropHandler * aSource, IVBVariableClass<IString> * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   SpriteDemoConn87 & setAString(SpriteDropHandler * aSelf) {iAString = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDropHandler::fileDroppedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteDropHandler(fileDropped) to newFilename(contents))");
         try {target->target().operator=(iAString->filename());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDropHandler * source;
   IVBVariableClass<IString> * target;
   SpriteDropHandler * iAString;


};   //SpriteDemoConn87


//*****************************************************************************
// Class definition for SpriteDemoConn98
//*****************************************************************************
class SpriteDemoConn98 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn98(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDropHandler * aSource, SpriteDemoSpriteFactoryFactory * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDropHandler::fileDroppedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteDropHandler(fileDropped) to SpriteFactory(new))");
         try {target->create();}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDropHandler * source;
   SpriteDemoSpriteFactoryFactory * target;


};   //SpriteDemoConn98


//*****************************************************************************
// Class definition for SpriteDemoConn80
//*****************************************************************************
class SpriteDemoConn80 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn80(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn80(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(InterfaceEnabler * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == InterfaceEnabler::interfaceNeedsDisablingId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InterfaceEnabler(interfaceNeedsDisabling) to FrameMenuCascade(disable))");
         try {target->setItem(target->menuItem(id+WNDOFFSET_SpriteDemo_FrameMenuCascade).setDisabled());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   InterfaceEnabler * source;
   IMenuBar * target;
   unsigned long id;


};   //SpriteDemoConn80


//*****************************************************************************
// Class definition for SpriteDemoConn51
//*****************************************************************************
class SpriteDemoConn51 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn51(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn51(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(InterfaceEnabler * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == InterfaceEnabler::interfaceNeedsEnablingId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InterfaceEnabler(interfaceNeedsEnabling) to FrameMenuCascade(enable))");
         try {target->setItem(target->menuItem(id+WNDOFFSET_SpriteDemo_FrameMenuCascade).setDisabled(false));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   InterfaceEnabler * source;
   IMenuBar * target;
   unsigned long id;


};   //SpriteDemoConn51


//*****************************************************************************
// Class definition for SpriteDemoConn52
//*****************************************************************************
class SpriteDemoConn52 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn52(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn52(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(InterfaceEnabler * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == InterfaceEnabler::interfaceNeedsDisablingId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InterfaceEnabler(interfaceNeedsDisabling) to MoveMenuCascade(disable))");
         try {target->setItem(target->menuItem(id+WNDOFFSET_SpriteDemo_MoveMenuCascade).setDisabled());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   InterfaceEnabler * source;
   IMenuBar * target;
   unsigned long id;


};   //SpriteDemoConn52


//*****************************************************************************
// Class definition for SpriteDemoConn43
//*****************************************************************************
class SpriteDemoConn43 : public IObserver, public IStandardNotifier {
public:
   //---------------------------------------------------------------------------
   // Constructors / destructors
   //---------------------------------------------------------------------------
   SpriteDemoConn43(unsigned long tid) {id = tid;};

   virtual  ~SpriteDemoConn43(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(InterfaceEnabler * aSource, IMenuBar * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == InterfaceEnabler::interfaceNeedsEnablingId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InterfaceEnabler(interfaceNeedsEnabling) to MoveMenuCascade(enable))");
         try {target->setItem(target->menuItem(id+WNDOFFSET_SpriteDemo_MoveMenuCascade).setDisabled(false));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   InterfaceEnabler * source;
   IMenuBar * target;
   unsigned long id;


};   //SpriteDemoConn43


//*****************************************************************************
// Class definition for SpriteDemoConn64
//*****************************************************************************
class SpriteDemoConn64 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn64(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< Sprite* > * aSource, InterfaceEnabler * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   SpriteDemoConn64 & setANumberOfSprites(IVSequence< Sprite* > * aSelf) {iANumberOfSprites = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPartCollectionNotification::removedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteCollection(removedEvent) to InterfaceEnabler(numberOfSprites))");
         try {target->setNumberOfSprites(iANumberOfSprites->numberOfElements());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< Sprite* > * source;
   InterfaceEnabler * target;
   IVSequence< Sprite* > * iANumberOfSprites;


};   //SpriteDemoConn64


//*****************************************************************************
// Class definition for SpriteDemoConn65
//*****************************************************************************
class SpriteDemoConn65 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn65(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IVSequence< Sprite* > * aSource, InterfaceEnabler * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };
   SpriteDemoConn65 & setANumberOfSprites(IVSequence< Sprite* > * aSelf) {iANumberOfSprites = aSelf; return *this;};

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == IPartCollectionNotification::addedId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : SpriteCollection(addedEvent) to InterfaceEnabler(numberOfSprites))");
         try {target->setNumberOfSprites(iANumberOfSprites->numberOfElements());}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IVSequence< Sprite* > * source;
   InterfaceEnabler * target;
   IVSequence< Sprite* > * iANumberOfSprites;


};   //SpriteDemoConn65


//*****************************************************************************
// Class definition for SpriteDemoConn47
//*****************************************************************************
class SpriteDemoConn47 : public IObserver {
public:
   virtual  ~SpriteDemoConn47(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(IInfoArea * aSource, IVBFlyText * aTarget)
      {source = aSource; target = aTarget; aligning = false; };
   void setSource()
      {      };
   void setTarget()
      {
      if (aligning==false) {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : InfoArea1(this) to VBFlyText1(longTextControl))");
         ITRACE_DEVELOP(" setting target from source ");
         aligning = true;
         try {target->setLongTextControl(source);}
         catch (IException& exc) {};
         aligning = false;
         }
      };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == VBINITIALIZEID) setTarget();
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   IInfoArea * source;
   IVBFlyText * target;
   Boolean aligning;


};   //SpriteDemoConn47


//*****************************************************************************
// Class definition for SpriteDemoConn57
//*****************************************************************************
class SpriteDemoConn57 : public IObserver, public IStandardNotifier {
public:
   virtual  ~SpriteDemoConn57(){};

   //---------------------------------------------------------------------------
   // public member functions
   //---------------------------------------------------------------------------
   void initialize(SpriteDemoConn78 * aSource, IMessageBox * aTarget)
      {source = aSource; target = aTarget; enableNotification(); };

protected:
   //---------------------------------------------------------------------------
   // protected member functions
   //---------------------------------------------------------------------------
   virtual IObserver & dispatchNotificationEvent(const INotificationEvent & anEvent)
      {
      if (anEvent.notificationId() == SpriteDemoConn78::exceptionId)
         {
         IFUNCTRACE_DEVELOP();
         ITRACE_DEVELOP(" firing connection : Conn78(exceptionOccurred) to MessageBox1(showException))");
         try {target->show(*(IException *) (anEvent.eventData().asUnsignedLong()));}
         catch (IException& exc) {};
         }
      return(*this);
      };

private:
   //---------------------------------------------------------------------------
   // private member data
   //---------------------------------------------------------------------------
   SpriteDemoConn78 * source;
   IMessageBox * target;


};   //SpriteDemoConn57


const INotificationId SpriteDemoSpriteFactoryFactory::newObjectCreatedId = "SpriteDemoSpriteFactoryFactory::newObjectCreatedId";

//------------------------------------------------------------------------------
// SpriteDemoSpriteFactoryFactory :: SpriteDemoSpriteFactoryFactory
//------------------------------------------------------------------------------
#pragma export (SpriteDemoSpriteFactoryFactory::SpriteDemoSpriteFactoryFactory())
SpriteDemoSpriteFactoryFactory::SpriteDemoSpriteFactoryFactory()
{
   enableNotification();
}

//------------------------------------------------------------------------------
// SpriteDemoSpriteFactoryFactory :: ~SpriteDemoSpriteFactoryFactory
//------------------------------------------------------------------------------
#pragma export (SpriteDemoSpriteFactoryFactory::~SpriteDemoSpriteFactoryFactory())
SpriteDemoSpriteFactoryFactory::~SpriteDemoSpriteFactoryFactory()
{
   disableNotification();
}

//------------------------------------------------------------------------------
// SpriteDemoSpriteFactoryFactory :: create
//------------------------------------------------------------------------------
#pragma export (SpriteDemoSpriteFactoryFactory::create())
Sprite * SpriteDemoSpriteFactoryFactory::create()
{
   Sprite *iSpriteFactory = new Sprite();
   iSpriteFactory->setFilename(inewFilename->target().asString());
   iSpriteFactory->setFastCanvas(iFastCanvas1);
   iSpriteFactory->enableNotification();
   notifyObservers(INotificationEvent(newObjectCreatedId, *this, true, IEventData((void *)iSpriteFactory)));
   return(iSpriteFactory);
}



#pragma export (SpriteDemo::readyId)
const INotificationId SpriteDemo::readyId = "SpriteDemo::readyId";

//------------------------------------------------------------------------------
// SpriteDemo :: defaultFramingSpec
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::defaultFramingSpec())
const IRectangle SpriteDemo::defaultFramingSpec()
{
   return(IRectangle(IPoint(1, IWindow::desktopWindow()->size().height() - -2 - 307),ISize(264, 307)));
}


//------------------------------------------------------------------------------
// SpriteDemo :: defaultStyle
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::defaultStyle())
const IFrameWindow::Style SpriteDemo::defaultStyle()
{
   return(IFrameWindow::defaultStyle() & ~IFrameWindow::maximizeButton & ~IFrameWindow::minimizeButton & ~IFrameWindow::sizingBorder & ~IWindow::visible | IFrameWindow::border);
}


//------------------------------------------------------------------------------
// SpriteDemo :: defaultTitle
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::defaultTitle())
IString SpriteDemo::defaultTitle()
{
   return("Sprite Demo");
}


//------------------------------------------------------------------------------
// SpriteDemo :: SpriteDemo
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::SpriteDemo(unsigned long, IWindow *, IWindow *, const IRectangle &, const IFrameWindow::Style &, const char *))
SpriteDemo::SpriteDemo(
      unsigned long id, 
      IWindow * parent, 
      IWindow * owner, 
      const IRectangle & rect, 
      const IFrameWindow::Style & style, 
      const char * title)
   : IFrameWindow(id, parent, owner, rect, style, title)
{
   iFrameWindowMenu = new IMenuBar(this);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_FileMenuCascade, "~File").addSubmenu(id+WNDOFFSET_SpriteDemo_FileMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_openMenuItem, "~Open sprite... \tCtrl+O", id+WNDOFFSET_SpriteDemo_FileMenuCascade);
   iFrameWindowMenu->addSeparator(id+WNDOFFSET_SpriteDemo_MenuSeparator4, id+WNDOFFSET_SpriteDemo_FileMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_exitMenuItem, "E~xit \tF3", id+WNDOFFSET_SpriteDemo_FileMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_FrameMenuCascade, "Frame").addSubmenu(id+WNDOFFSET_SpriteDemo_FrameMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_previousFrameMenuItem, "~Previous Frame \t-", id+WNDOFFSET_SpriteDemo_FrameMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_nextFrameMenuItem, "~Next Frame \t+", id+WNDOFFSET_SpriteDemo_FrameMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_MoveMenuCascade, "~Move").addSubmenu(id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addSeparator(id+WNDOFFSET_SpriteDemo_MenuSeparator1, id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_moveRight, "Right \tR", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_MenuItem3, "Left \tL", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_upMenuItem, "Up \tU", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_downMenuItem, "Down \tD", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addSeparator(id+WNDOFFSET_SpriteDemo_MenuSeparator2, id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_MenuItem1, "Fast right \tCtrl+R", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_MenuItem11, "Fast left \tCtrl+L", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_FastUpMenuItem, "Fast up \tCtrl+U", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowMenu->addText(id+WNDOFFSET_SpriteDemo_FastDownMenuItem, "Fast down \tCtrl+D", id+WNDOFFSET_SpriteDemo_MoveMenuCascade);
   iFrameWindowAccelTable = new IAccelerator(id+WNDOFFSET_SpriteDemo_FrameWindow, this);
   iMultiCellCanvas1 = new IMultiCellCanvas(
      IC_FRAME_CLIENT_ID, 
      this, 
      this, 
      IRectangle(), 
      IMultiCellCanvas::defaultStyle() | IWindow::clipChildren);
   iSpriteDetails = new SpriteDetails(
      id+WNDOFFSET_SpriteDemo_SpriteDetails, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle ( ), 
      IContainerControl::defaultStyle() & ~IContainerControl::extendedSelection & ~IContainerControl::multipleSelection | IContainerControl::singleSelection);
   iFastCanvas1 = new FastCanvas(
      id+WNDOFFSET_SpriteDemo_FastCanvas1, 
      iMultiCellCanvas1, 
      iMultiCellCanvas1, 
      IRectangle());
   iInfoArea1 = new IInfoArea(this, id+WNDOFFSET_SpriteDemo_InfoArea1);
   iOpenSprite = new IVBFileDialog(this);
   iSpriteCollection = new IVSequence< Sprite* >();
   iSpriteFactory = new SpriteDemoSpriteFactoryFactory();
   iSpriteCommander = new SpriteCommander();
   iSpriteDropHandler = new SpriteDropHandler();
   inewFilename = new IVBVariableClass<IString>();
   iInterfaceEnabler = new InterfaceEnabler();
   iVBFlyText1 = new IVBFlyText(this);
   iMessageBox1 = new IMessageBox(this);

   conn6 = new SpriteDemoConn6(id);
   conn60 = new SpriteDemoConn60(id);
   conn16 = new SpriteDemoConn16(id);
   conn62 = new SpriteDemoConn62();
   conn71 = new SpriteDemoConn71();
   conn77 = new SpriteDemoConn77();
   conn17 = new SpriteDemoConn17();
   conn20 = new SpriteDemoConn20();
   conn33 = new SpriteDemoConn33();
   conn25 = new SpriteDemoConn25();
   conn26 = new SpriteDemoConn26(id);
   conn37 = new SpriteDemoConn37(id);
   conn38 = new SpriteDemoConn38(id);
   conn49 = new SpriteDemoConn49(id);
   conn30 = new SpriteDemoConn30(id);
   conn41 = new SpriteDemoConn41(id);
   conn29 = new SpriteDemoConn29();
   conn50 = new SpriteDemoConn50();
   conn61 = new SpriteDemoConn61();
   conn48 = new SpriteDemoConn48(id);
   conn59 = new SpriteDemoConn59(id);
   conn70 = new SpriteDemoConn70(id);
   conn91 = new SpriteDemoConn91(id);
   conn74 = new SpriteDemoConn74();
   conn45 = new SpriteDemoConn45();
   conn55 = new SpriteDemoConn55();
   conn67 = new SpriteDemoConn67();
   conn78 = new SpriteDemoConn78();
   conn87 = new SpriteDemoConn87();
   conn98 = new SpriteDemoConn98();
   conn80 = new SpriteDemoConn80(id);
   conn51 = new SpriteDemoConn51(id);
   conn52 = new SpriteDemoConn52(id);
   conn43 = new SpriteDemoConn43(id);
   conn64 = new SpriteDemoConn64();
   conn65 = new SpriteDemoConn65();
   conn47 = new SpriteDemoConn47();
   conn57 = new SpriteDemoConn57();

   iMultiCellCanvas1->addToCell(iSpriteDetails, 1, 3, 3, 1);
   iMultiCellCanvas1->addToCell(iFastCanvas1, 2, 2, 1, 1);
   iMultiCellCanvas1->setColumnWidth(1, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setColumnWidth(2, IMultiCellCanvas::defaultCell().width(), true);
   iMultiCellCanvas1->setColumnWidth(3, IMultiCellCanvas::defaultCell().width(), false);
   iMultiCellCanvas1->setRowHeight(1, IMultiCellCanvas::defaultCell().height(), false);
   iMultiCellCanvas1->setRowHeight(2, IMultiCellCanvas::defaultCell().height(), true);
   iMultiCellCanvas1->setRowHeight(3, IMultiCellCanvas::defaultCell().height(), true);
   iSpriteDetails->setMinimumSize(ISize(256, 140));
   iSpriteDetails->setFont(IFont("Helv", 8).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   iFastCanvas1->setMinimumSize(ISize(209, 68));
   iInfoArea1->setFont(IFont("Helv", 8).setBold(false).setItalic(false).setUnderscore(false).setStrikeout(false).setOutline(false));
   this->setFocus();
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_FrameMenuCascade).setDisabled(true));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_previousFrameMenuItem).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_nextFrameMenuItem).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_MoveMenuCascade).setDisabled(true));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_moveRight).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_MenuItem3).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_upMenuItem).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_downMenuItem).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_MenuItem1).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_MenuItem11).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_FastUpMenuItem).setDisabled(false));
   iFrameWindowMenu->setItem(iFrameWindowMenu->menuItem(id+WNDOFFSET_SpriteDemo_FastDownMenuItem).setDisabled(false));
   this->setClient(iMultiCellCanvas1);
   iOpenSprite->setFileName("*.gfi");
   iSpriteFactory->setFastCanvas1(iFastCanvas1);
   iSpriteFactory->setnewFilename(inewFilename);
   iSpriteCommander->setFastMovementMultiplier(IPoint(20,20));
}     //end constructor


//------------------------------------------------------------------------------
// SpriteDemo :: ~SpriteDemo
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::~SpriteDemo())
SpriteDemo::~SpriteDemo()
{
   conn6->stopHandlingNotificationsFor(*this);
   conn60->stopHandlingNotificationsFor(*this);
   conn16->stopHandlingNotificationsFor(*this);
   conn62->stopHandlingNotificationsFor(*this);
   conn71->stopHandlingNotificationsFor(*iSpriteCollection);
   conn71->stopHandlingNotificationsFor(*iSpriteDetails);
   conn77->stopHandlingNotificationsFor(*iOpenSprite);
   conn77->stopHandlingNotificationsFor(*inewFilename);
   conn17->stopHandlingNotificationsFor(*iOpenSprite);
   conn20->stopHandlingNotificationsFor(*iSpriteFactory);
   conn33->stopHandlingNotificationsFor(*iSpriteCollection);
   conn33->stopHandlingNotificationsFor(*iFastCanvas1);
   conn25->stopHandlingNotificationsFor(*iSpriteCollection);
   conn25->stopHandlingNotificationsFor(*iSpriteCommander);
   conn26->stopHandlingNotificationsFor(*this);
   conn37->stopHandlingNotificationsFor(*this);
   conn38->stopHandlingNotificationsFor(*this);
   conn49->stopHandlingNotificationsFor(*this);
   conn30->stopHandlingNotificationsFor(*this);
   conn41->stopHandlingNotificationsFor(*this);
   conn29->stopHandlingNotificationsFor(*iSpriteDetails);
   conn50->stopHandlingNotificationsFor(*iFastCanvas1);
   conn50->stopHandlingNotificationsFor(*iSpriteCommander);
   conn61->stopHandlingNotificationsFor(*iSpriteFactory);
   conn48->stopHandlingNotificationsFor(*this);
   conn59->stopHandlingNotificationsFor(*this);
   conn70->stopHandlingNotificationsFor(*this);
   conn91->stopHandlingNotificationsFor(*this);
   conn74->stopHandlingNotificationsFor(*this);
   conn45->stopHandlingNotificationsFor(*iSpriteDetails);
   conn45->stopHandlingNotificationsFor(*iSpriteDropHandler);
   conn55->stopHandlingNotificationsFor(*this);
   conn67->stopHandlingNotificationsFor(*iSpriteDropHandler);
   conn67->stopHandlingNotificationsFor(*iSpriteDetails);
   conn78->stopHandlingNotificationsFor(*this);
   conn87->stopHandlingNotificationsFor(*iSpriteDropHandler);
   conn98->stopHandlingNotificationsFor(*iSpriteDropHandler);
   conn80->stopHandlingNotificationsFor(*iInterfaceEnabler);
   conn51->stopHandlingNotificationsFor(*iInterfaceEnabler);
   conn52->stopHandlingNotificationsFor(*iInterfaceEnabler);
   conn43->stopHandlingNotificationsFor(*iInterfaceEnabler);
   conn64->stopHandlingNotificationsFor(*iSpriteCollection);
   conn65->stopHandlingNotificationsFor(*iSpriteCollection);
   conn47->stopHandlingNotificationsFor(*iInfoArea1);
   conn47->stopHandlingNotificationsFor(*iVBFlyText1);
   conn57->stopHandlingNotificationsFor(*conn78);

   delete conn6;
   delete conn60;
   delete conn16;
   delete conn62;
   delete conn71;
   delete conn77;
   delete conn17;
   delete conn20;
   delete conn33;
   delete conn25;
   delete conn26;
   delete conn37;
   delete conn38;
   delete conn49;
   delete conn30;
   delete conn41;
   delete conn29;
   delete conn50;
   delete conn61;
   delete conn48;
   delete conn59;
   delete conn70;
   delete conn91;
   delete conn74;
   delete conn45;
   delete conn55;
   delete conn67;
   delete conn78;
   delete conn87;
   delete conn98;
   delete conn80;
   delete conn51;
   delete conn52;
   delete conn43;
   delete conn64;
   delete conn65;
   delete conn47;
   delete conn57;

   delete iFrameWindowMenu;

   delete iFrameWindowAccelTable;
   delete iMultiCellCanvas1;
   delete iSpriteDetails;
   delete iFastCanvas1;
   delete iInfoArea1;
   delete iOpenSprite;
   delete iSpriteCollection;
   delete iSpriteFactory;
   delete iSpriteCommander;
   delete iSpriteDropHandler;
   delete inewFilename;
   delete iInterfaceEnabler;
   delete iVBFlyText1;
   delete iMessageBox1;
}

//------------------------------------------------------------------------------
// SpriteDemo :: initializePart
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::initializePart())
SpriteDemo & SpriteDemo::initializePart()
{
   iSpriteDetails->initializePart();
   iFastCanvas1->initializePart();
   makeConnections();
   notifyObservers(INotificationEvent(readyId, *this));
   return *this;
}


//------------------------------------------------------------------------------
// SpriteDemo :: makeConnections
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::makeConnections())
Boolean SpriteDemo::makeConnections()
{
   this->enableNotification();
   iMultiCellCanvas1->enableNotification();
   iSpriteDetails->enableNotification();
   iFastCanvas1->enableNotification();
   iInfoArea1->enableNotification();
   iOpenSprite->enableNotification();
   iSpriteCollection->enableNotification();
   iSpriteFactory->enableNotification();
   iSpriteCommander->enableNotification();
   iSpriteDropHandler->enableNotification();
   inewFilename->enableNotification();
   iInterfaceEnabler->enableNotification();
   iVBFlyText1->enableNotification();

   unsigned long id = this->id();
   conn6->initialize(iFrameWindowMenu, this);
   conn6->handleNotificationsFor(*this);
   conn60->initialize(iFrameWindowMenu, iOpenSprite);
   conn60->handleNotificationsFor(*this);
   conn16->initialize(iFrameWindowMenu, iOpenSprite);
   conn16->handleNotificationsFor(*this);
   conn62->initialize(this, this);
   conn62->handleNotificationsFor(*this);
   conn71->initialize(iSpriteCollection, iSpriteDetails);
   conn71->handleNotificationsFor(*iSpriteCollection);
   conn71->handleNotificationsFor(*iSpriteDetails);
   conn77->initialize(iOpenSprite, inewFilename);
   conn77->handleNotificationsFor(*iOpenSprite);
   conn77->handleNotificationsFor(*inewFilename);
   conn17->initialize(iOpenSprite, iSpriteFactory);
   conn17->handleNotificationsFor(*iOpenSprite);
   conn20->initialize(iSpriteFactory, iSpriteCollection);
   conn20->handleNotificationsFor(*iSpriteFactory);
   conn33->initialize(iSpriteCollection, iFastCanvas1);
   conn33->handleNotificationsFor(*iSpriteCollection);
   conn33->handleNotificationsFor(*iFastCanvas1);
   conn25->initialize(iSpriteCollection, iSpriteCommander);
   conn25->handleNotificationsFor(*iSpriteCollection);
   conn25->handleNotificationsFor(*iSpriteCommander);
   conn26->initialize(iFrameWindowMenu, iSpriteCommander);
   conn26->handleNotificationsFor(*this);
   conn37->initialize(iFrameWindowMenu, iSpriteCommander);
   conn37->handleNotificationsFor(*this);
   conn38->initialize(iFrameWindowMenu, iSpriteCommander);
   conn38->handleNotificationsFor(*this);
   conn49->initialize(iFrameWindowMenu, iSpriteCommander);
   conn49->handleNotificationsFor(*this);
   conn30->initialize(iFrameWindowMenu, iSpriteCommander);
   conn30->handleNotificationsFor(*this);
   conn41->initialize(iFrameWindowMenu, iSpriteCommander);
   conn41->handleNotificationsFor(*this);
   conn29->initialize(iSpriteDetails, iSpriteCommander);
   conn29->handleNotificationsFor(*iSpriteDetails);
   conn29->setASelectedSpriteNumber(iSpriteDetails);
   conn50->initialize(iFastCanvas1, iSpriteCommander);
   conn50->handleNotificationsFor(*iFastCanvas1);
   conn50->handleNotificationsFor(*iSpriteCommander);
   conn61->initialize(iSpriteFactory, iSpriteDetails);
   conn61->handleNotificationsFor(*iSpriteFactory);
   conn48->initialize(iFrameWindowMenu, iSpriteCommander);
   conn48->handleNotificationsFor(*this);
   conn59->initialize(iFrameWindowMenu, iSpriteCommander);
   conn59->handleNotificationsFor(*this);
   conn70->initialize(iFrameWindowMenu, iSpriteCommander);
   conn70->handleNotificationsFor(*this);
   conn91->initialize(iFrameWindowMenu, iSpriteCommander);
   conn91->handleNotificationsFor(*this);
   conn74->initialize(this, this);
   conn74->handleNotificationsFor(*this);
   conn45->initialize(iSpriteDetails, iSpriteDropHandler);
   conn45->handleNotificationsFor(*iSpriteDetails);
   conn45->handleNotificationsFor(*iSpriteDropHandler);
   conn55->initialize(this, iSpriteDropHandler);
   conn55->handleNotificationsFor(*this);
   conn67->initialize(iSpriteDropHandler, iSpriteDetails);
   conn67->handleNotificationsFor(*iSpriteDropHandler);
   conn67->handleNotificationsFor(*iSpriteDetails);
   conn78->initialize(this, iFastCanvas1);
   conn78->handleNotificationsFor(*this);
   conn87->initialize(iSpriteDropHandler, inewFilename);
   conn87->handleNotificationsFor(*iSpriteDropHandler);
   conn87->setAString(iSpriteDropHandler);
   conn98->initialize(iSpriteDropHandler, iSpriteFactory);
   conn98->handleNotificationsFor(*iSpriteDropHandler);
   conn80->initialize(iInterfaceEnabler, iFrameWindowMenu);
   conn80->handleNotificationsFor(*iInterfaceEnabler);
   conn51->initialize(iInterfaceEnabler, iFrameWindowMenu);
   conn51->handleNotificationsFor(*iInterfaceEnabler);
   conn52->initialize(iInterfaceEnabler, iFrameWindowMenu);
   conn52->handleNotificationsFor(*iInterfaceEnabler);
   conn43->initialize(iInterfaceEnabler, iFrameWindowMenu);
   conn43->handleNotificationsFor(*iInterfaceEnabler);
   conn64->initialize(iSpriteCollection, iInterfaceEnabler);
   conn64->handleNotificationsFor(*iSpriteCollection);
   conn64->setANumberOfSprites(iSpriteCollection);
   conn65->initialize(iSpriteCollection, iInterfaceEnabler);
   conn65->handleNotificationsFor(*iSpriteCollection);
   conn65->setANumberOfSprites(iSpriteCollection);
   conn47->initialize(iInfoArea1, iVBFlyText1);
   conn47->handleNotificationsFor(*iInfoArea1);
   conn47->handleNotificationsFor(*iVBFlyText1);
   conn57->initialize(conn78, iMessageBox1);
   conn57->handleNotificationsFor(*conn78);

   conn71->setTarget();
   conn77->setTarget();
   conn33->setTarget();
   conn25->setTarget();
   conn50->setTarget();
   conn45->setTarget();
   conn67->setTarget();
   conn47->setTarget();
   return true;
}


//------------------------------------------------------------------------------
// SpriteDemo :: dispatchNotificationEvent
//------------------------------------------------------------------------------
#pragma export (SpriteDemo::dispatchNotificationEvent(const INotificationEvent &))
IObserver & SpriteDemo::dispatchNotificationEvent(const INotificationEvent & anEvent)
{
   return *this;
}



#include "SpriteDemo.cpv"
